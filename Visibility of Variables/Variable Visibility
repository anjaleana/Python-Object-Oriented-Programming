# Implement a class Laptop that sets the following instance attribute when creating an instance:

# brand as bare instance attribute

# model as proctected attribute

# price as private attribute

# Then create an instance named laptop with the following arguments:

# 'Acer'

# 'Predator'

# 5490

# In response, print the value of the __dict__ attribute of the laptop instance

class Laptop:
    def __init__(self,brand,model,price):
        self.brand = brand
        self._model = model  # model is protected attribute
        self.__price = price # price is private attribute
        
laptop = Laptop('Acer','Predator',5490)
print(laptop.__dict__)

Output:
{'brand': 'Acer', '_model': 'Predator', '_Laptop__price': 5490}


# An implementation of the Laptop class is given. Implement a method in the Laptop class called display_private_attrs() 
# that displays the names of all private attributes of the instance. Then create an instance with the given arguments:

# 'Acer','Predator','AC-100',5490,0.2

# and assign it to variable laptop.call display_private_attr() on the laptop instance

class Laptop:
 
    def __init__(self, brand, model, code, price, margin):
        self.brand = brand
        self._model = model
        self._code = code
        self.__price = price
        self.__margin = margin
 
    def display_private_attrs(self):
        for attr in self.__dict__:
            if attr.startswith(f'_{self.__class__.__name__}__'):
                print(attr)    
 
 
laptop = Laptop('Acer', 'Predator', 'AC-100', 5490, 0.2)
laptop.display_private_attrs()

output:
_Laptop__price
_Laptop__margin
