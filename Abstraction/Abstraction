# Create an abstract class named Figure with the abstract method named area. 
#Then create a Square class that inherits from the Figure class, which sets the side length of the square in the constructor.
# Implement the area method that allows you to calculate the area of a square.

# Then try to create an instance of the Figure class, in case of an error, print the error message to the console.

from abc import ABC,abstractmethod
class Figure(ABC):
    @abstractmethod
    def area(self):
        pass
class Square(Figure):
    def __init__(self,a):
        self.a = a
    def area(self):
        return self.a*self.a

try:
    Figure()
except TypeError as error:
    print(error)

Output:
Can't instantiate abstract class Figure with abstract methods area

# Implementation of Figure and Square classes is given. Add an abstract method called perimeter() to the Figure class,
# then implement it the square class,The perimeter() method should return the perimeter of square

from abc import ABC, abstractmethod
class Figure(ABC):
    @abstractmethod
    def perimeter(self):
        pass
class Square(Figure):
    def __init__(self,a):
        self.a = a
        
    def perimeter(self):
        return 4*self.a
    
square = Square(4)
print(square.perimeter())

Output:
16

# Create an abstract class named TaxPayer. In the __init__() method set an instance attribute(without validation) called salary.
# Then abstract method called calculate_tax() (use the @abstractmethod decorator)

class TaxPayer:
    def __init__(self,salary):
        self.salary = salary
    @abstractmethod
    def calculate_tax(self):
        pass
class StudentTaxPayer(TaxPayer):
    def calculate_tax(self):
        return self.salary*0.15
    
student = StudentTaxPayer(40000)
print(student.calculate_tax())

Output:
6000.0
